%{
open Ast
%}

%start TopLevel
%start Expr

%token <string> ID
%token <int> INTEGER_LITERAL
%token <single> FLOAT_LITERAL
%token <bool> BOOLEAN_LITERAL
%token <string> STRING_LITERAL
%token LET IN WITH IF THEN ELSE FUN DEFINE FOR GROUP BY
%token LPAREN RPAREN LBRACKET RBRACKET LBRACE RBRACE ASSIGN
%token DOT COLON SEMICOLON ARROW PLUS MINUS TIMES DIV MOD COMMA
%token SEMICOLON2 UNDERSCORE STREAM
%token GT GTE EQ DIFF LTE LT AND OR TRUE FALSE
%token PIPE ENUM OF MATCH END
%token EOF
%token INT FLOAT BOOL STRING NULL

%token ENTITY CREATE_FROM BELONGS_TO HAS_MANY MEMBER

%nonassoc LET IN
%right ARROW
%right SEMICOLON
%nonassoc IF THEN ELSE
%left OR
%left AND
%left EQ DIFF
%left GT GTE LTE LT
%left PLUS MINUS
%left TIMES DIV MOD
%left DOT
%nonassoc LPAREN LBRACKET

%type <prog list> TopLevel
%type <expr> Expr

%%

TopLevel: 
  | EOF											          { [] }
  | DefTypeTop                                            { $1 }
  | DefTop                                                { $1 }
  | EntityTop                                             { $1 }
  | ExprTop                                               { $1 }
  | DefunTop                                              { $1 }
  | StreamDefTop                                          { $1 }

DefTypeTop:
  | DefType EOF                                           { [$1] }
  | DefType SEMICOLON2 TopLevel                           { $1::$3 }

DefTop:
  | Def EOF                                               { [$1] }
  | Def SEMICOLON2 TopLevel                               { $1::$3 }

EntityTop:
  | Entity EOF                                            { [$1] }
  | Entity SEMICOLON2 TopLevel                            { $1::$3 }

ExprTop:
  | Expr EOF                                              { [Expr $1] }
  | Expr SEMICOLON2 TopLevel                              { (Expr $1)::$3 }

DefunTop:
  | Defun EOF                                             { [$1] }
  | Defun SEMICOLON2 TopLevel                             { $1::$3 }

StreamDefTop:
  | StreamDef EOF                                         { [$1] }
  | StreamDef SEMICOLON2 TopLevel                         { $1::$3 }

StreamDef: ID ASSIGN STREAM LPAREN FieldTypePairs RPAREN  { StreamDef (Identifier $1, $5) }
  
DefType: ENUM ID ASSIGN Variants                          { (DefVariant (Identifier $2, $4)) }

Variants:
  | Variant Variants                                      { $1::$2 }
  | Variant                                               { [$1] }
           
Variant:
  | PIPE ID                                               { (Identifier $2, TyUnit) }
  | PIPE ID OF Type                                       { (Identifier $2, $4) }

Def:
  | ID ASSIGN Expr                                        { Def (Identifier $1, $3, None) }
  | ID ASSIGN Expr ID Listeners                           { if $4 = "when"
                                                              then Def (Identifier $1, $3, Some $5)
                                                              else failwithf "Expected 'when' instead of '%s'" $4 }

FieldTypePairs: ID COLON Type MorePairs                   { (Identifier $1, $3)::$4 }

MorePairs:
  |                                                       { [] }
  | COMMA ID COLON Type MorePairs                         { (Identifier $2, $4)::$5 }

Listeners:
  | Listener                                              { [$1] }
  | Listener Listeners                                    { $1::$2 }

Listener:
  | PIPE ID IN Expr OptGuard ARROW Expr                   { Listener (Some (Identifier $2), $4, $5, $7) }
  | PIPE Expr OptGuard ARROW Expr                         { Listener (None, $2, $3, $5) }


OptGuard:
  |                                                       { None }
  | Guard                                                 { Some $1 }

Guard: IF Expr                                            { $2 }

Entity: ENTITY ID ASSIGN EntityBody                       { Entity (Identifier $2, $4) }

EntityBody: CreateFrom Associations Members				  { $1, $2, $3 }

CreateFrom: CREATE_FROM LPAREN Expr COMMA Symbol RPAREN   { ($3, $5) }

Associations:
  | BELONGS_TO Symbol Associations                        { (BelongsTo $2)::$3 }
  | HAS_MANY Symbol Associations                          { (HasMany $2)::$3 }
  |                                                       { [] }
          
Members:
  | MemberDef Members                                     { $1::$2 }
  |                                                       { [] }

MemberDef:
  | MEMBER ID DOT ID ASSIGN Expr                          { Member (Identifier $2, Identifier $4, $6, None) }
  | MEMBER ID DOT ID ASSIGN Expr ID Listeners             { if $7 = "when"
                                                              then Member (Identifier $2, Identifier $4, $6, Some $8)
                                                              else failwithf "Expected 'when' instead of '%s'" $7 }

Defun: DEFINE ID Parameters COLON Type ASSIGN Expr        { Function (Identifier $2, $3, $5, $7) }

Expr:
  | Expr DOT ID                                           { MemberAccess ($1, Identifier $3) }
  | Expr LPAREN Args RPAREN                               { match $1 with
                                                            | MemberAccess (obj, memb) -> MethodCall (obj, memb, $3)
                                                            | _ -> FuncCall ($1, $3) }
  | LPAREN Expr RPAREN                                    { $2 }
  | Expr LBRACKET Expr RBRACKET                           { ArrayIndex ($1, $3) }
  | Expr LBRACKET Expr TimeUnit RBRACKET                  { ArrayIndex ($1, Time ($3, $4)) }
  | LBRACE Expr RBRACE                                    { FixedAccess ($2) }
  | FUN Parameters ARROW Expr                             { Lambda ($2, $4) }
  | Expr SEMICOLON Expr                                   { Seq ($1, $3) }
  | BinaryExpr                                            { $1 }
  | IF Expr THEN Expr ELSE Expr                           { If ($2, $4, $6) }
  | MATCH Expr WITH MatchCases END                        { Match ($2, $4) }
  | LET ID OptType ASSIGN Expr IN Expr                    { Let (Identifier $2, $3, $5, $7) }
  | Record                                                { $1 }
  | Comprehension                                         { $1 }
  | ID                                                    { Id (Identifier $1) }
  | Symbol                                                { SymbolExpr $1 }
  | INTEGER_LITERAL                                       { Integer $1 }
  | FLOAT_LITERAL                                         { Float $1 }
  | BOOLEAN_LITERAL                                       { Bool $1 }
  | STRING_LITERAL                                        { String $1 }
  | NULL                                                  { Null }

BinaryExpr:
  | Arith                                                 { $1 }
  | Conditional                                           { $1 }

Arith:
  | Expr PLUS  Expr                                       { BinaryExpr (Plus, $1, $3) }
  | Expr MINUS Expr                                       { BinaryExpr (Minus, $1, $3) }
  | Expr TIMES Expr                                       { BinaryExpr (Times, $1, $3) }
  | Expr DIV   Expr                                       { BinaryExpr (Div, $1, $3) }
  | Expr MOD   Expr                                       { BinaryExpr (Mod, $1, $3) }

Conditional:
  | Expr GT   Expr                                        { BinaryExpr (GreaterThan, $1, $3) }
  | Expr GTE  Expr                                        { BinaryExpr (GreaterThanOrEqual, $1, $3) }
  | Expr EQ   Expr                                        { BinaryExpr (Equal, $1, $3) }
  | Expr DIFF Expr                                        { BinaryExpr (NotEqual, $1, $3) }
  | Expr LTE  Expr                                        { BinaryExpr (LessThanOrEqual, $1, $3) }
  | Expr LT   Expr                                        { BinaryExpr (LessThan, $1, $3) }
  | Expr AND  Expr                                        { BinaryExpr (And, $1, $3) }
  | Expr OR   Expr                                        { BinaryExpr (Or, $1, $3) }

MatchCases:
  | MatchCase MatchCases                                  { $1::$2 }
  | MatchCase                                             { [$1] }

MatchCase:
  | PIPE ID LPAREN UNDERSCORE RPAREN ARROW Expr           { MatchCase (Identifier $2, Some (Identifier "_"), $7) }
  | PIPE ID LPAREN ID RPAREN ARROW Expr                   { MatchCase (Identifier $2, Some (Identifier $4), $7) }
  | PIPE ID ARROW Expr                                    { MatchCase (Identifier $2, None, $4) }

Symbol: COLON ID                                          { Symbol $2 }

Type: 
  | INT                                                   { TyInt }
  | FLOAT                                                 { TyFloat }
  | BOOL                                                  { TyBool }
  | STRING                                                { TyString }
  | Type ARROW Type                                       { TyArrow ($1, $3) }
  | RecordType                                            { $1 }
  | ID                                                    { TyAlias $1 }
  | LPAREN Type RPAREN                                    { $2 }

RecordType: LBRACE FieldTypes RBRACE                      { TyRecord (Map.of_list $2) }

FieldTypes: ID COLON Type MoreFieldTypes                  { ($1, $3)::$4 }

MoreFieldTypes:
  |                                                       { [] }
  | COMMA ID COLON Type MoreFieldTypes                    { ($2, $4)::$5 }


OptType:
  |                                                       { None }
  | COLON Type                                            { Some $2 }
      
// (), id or id1 id2 ... idN
Parameters:
  | LPAREN RPAREN                                         { [] }
  | Parameter MoreParams                                  { $1::$2 }

MoreParams:
  |                                                       { [] }
  | Parameter MoreParams                                  { $1::$2 }
            
Parameter:
  | UNDERSCORE                                            { (Param (Identifier "_", None)) }
  | ID                                                    { (Param (Identifier $1, None)) }
  | LPAREN ID COLON Type RPAREN                           { (Param (Identifier $2, Some $4)) }

// Records: { a = 1, b = ... }

Record:
  | LBRACE Expr WITH InitList RBRACE                      { RecordWith ($2, $4) }
  | LBRACE InitList RBRACE                                { Record $2 }

InitList: ID ASSIGN Expr MoreInits                        { ($1, $3)::$4 }

MoreInits:
  |                                                       { [] }
  | COMMA ID ASSIGN Expr MoreInits                        { ($2, $4)::$5 }


// Zero or more, comma-separated expressions
Args:
  |                                                       { [] }
  | Expr MoreArgs                                         { $1::$2 }

MoreArgs:
  |                                                       { [] }
  | COMMA Expr MoreArgs                                   { $2::$3 }

TimeUnit: ID                                              { match $1 with
                                                            | "sec" | "secs" -> Sec
                                                            | "min" | "mins" -> Min
                                                            | _ -> failwithf "Invalid time with: " $1 }

Comprehension:
  | DictionaryComprehension                               { $1 }
  | StreamComprehension                                   { $1 }

StreamComprehension:
  | LBRACKET Expr FOR ID IN Expr RBRACKET                 { MethodCall ($6, Identifier "select", [Lambda ([Param (Identifier $4, None)], $2)]) }
  | LBRACKET Expr FOR ID IN Expr IF Expr RBRACKET         { MethodCall (MethodCall ($6, Identifier "where", [Lambda ([Param (Identifier $4, None)], $8)]),
                                                                        Identifier "select",
                                                                        [Lambda ([Param (Identifier $4, None)], $2)]) }

DictionaryComprehension:
  | LBRACE Expr FOR ID IN Expr RBRACE                     { MethodCall ($6, Identifier "select", [Lambda ([Param (Identifier $4, None)], $2)]) }
  | LBRACE Expr FOR ID IN Expr IF Expr RBRACE             { MethodCall (MethodCall ($6, Identifier "where", [Lambda ([Param (Identifier $4, None)], $8)]),
                                                                        Identifier "select",
                                                                        [Lambda ([Param (Identifier $4, None)], $2)]) }
  | LBRACE Expr FOR ID IN Expr GROUP BY Expr RBRACE       { MethodCall ($6, Identifier "groupby", [$9; Lambda ([Param (Identifier $4, None)], $2)]) }