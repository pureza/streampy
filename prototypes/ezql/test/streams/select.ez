temp_readings = stream (:temperature);
hum_readings = stream (:humidity);

lastTemp = temp_readings.last(:temperature);
lastHum = hum_readings.last(:humidity);


// hot depends on ev

temp_readingsX2 = temp_readings
                   .select(ev -> { :temperatureX2 = ev.temperature * 2 });


// all_readings doesn't depend on ev
all_readings = temp_readings
                 .where(ev -> 30 > 20);


// slightly more complex expression that is always true
all_readings2 = all_readings 
                  .where(ev -> ev.temperature * 2 == 
                              temp_readings.last(:temperature) +
                              temp_readings.last(:temperature));

// correlated with humidity
wet_readings = all_readings2 
                 .where(ev -> lastHum > 50);

// The predicate is always true
hot_wet_readings = wet_readings
                     .where (ev -> ev.temperature > lastTemp - 1);


#! hum_readings
Timestamp, humidity
0,         40
3,         60

#! temp_readings
Timestamp, temperature
0,          30
3,          15
4,          50
