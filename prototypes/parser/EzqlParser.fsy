%{
open EzqlAst
%}

%start start

%token <string> ID COMPARE_OP
%token <int> INTEGER_LITERAL
%token CLASS NEW IF THEN ELSE MATCH WITH FUN
%token LPAREN RPAREN DOT COLON ARROW PLUS MINUS TIMES EQUALS COMMA LAMBDA
%token BEGIN END EOF

%type <prog> start

%%

start: prog                                              { $1 }

prog: classes                                            { Prog ($1) }

classes:
    | classDecl                                          { [$1] }
    | classes classDecl                                  { $1 @ [$2] }

classDecl:
    | CLASS ID BEGIN methods END                         { Class ($2, $4) }

methods:
    | methodDecl                                         { [$1] }
    | methods methodDecl                                 { $1 @ [$2] }

methodDecl:
    | ID LPAREN parameters RPAREN BEGIN exprs END        { Method ($1, $3, $6) }

exprs:
    | expr                                               { [$1] }
    | exprs expr                                         { $1 @ [$2] }

expr:
    | expr DOT ID LPAREN args RPAREN                     { MethodCall($1, Identifier $3, $5) }
    | LAMBDA parameters ARROW BEGIN exprs END            { Lambda($2, $5) }
    | LPAREN expr RPAREN                                 { $2 }
    | ID                                                 { Id (Identifier $1) }
    | INTEGER_LITERAL                                    { Integer $1 }
    | COLON ID                                           { Symbol $2 }

// Zero or more, comma-separated parameters
parameters:
    |                                                    { [] }
    | ID more_params                                     { (Identifier $1)::$2 }

more_params:
    |                                                    { [] }
    | COMMA ID more_params                               { (Identifier $2)::$3 }


// Zero or more, comma-separated expressions
args:
    |                                                    { [] }
    | expr more_args                                     { $1::$2 }

more_args:
    |                                                    { [] }
    | COMMA expr more_args                               { $2::$3 }
