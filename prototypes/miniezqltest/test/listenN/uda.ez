temp_readings = stream of { room_id:int, temperature:int };;

define coalesce (n, v) = if n.null? then v else n;;


// Count for int windows
define count(n:[int]) =
  let listener = 0
    when | n.added()         -> listener + (if n[-1].null? then 0 else 1)
         | ev in n.expired() -> listener - (if ev.value.null? then 0 else 1)
  in
    listener;;


// Sum for int windows
define sum(n:[int]) =
  let listener = n[0]
    when | n.added()         -> coalesce (listener, 0) + n[-1]
         | ev in n.expired() -> listener - coalesce(ev.value, 0)
  in
    listener;;



// Avg for int windows
define avg(n:[int]) =
  let c = count (n) in
  if c == 0 then 0 else sum(n) / c;;



define any?(n:[int]) (pred:int -> bool) =
  let result = false
    when n.added() -> result or pred(n[-1])
  in
    result;;


// Exponential moving average
// The initial value is the arithmetic average.
enum EmaState =
  | Init of { count:int, sum:float }
  | Normal of float;;


define ema (data:int) (n:int) =
  let alpha = 2 / (n + 1.0) in
  let result = Init ({ count = 0, sum = 0.0 })
    when | data.changes() ->
      match result with
        | Init (s) -> let next_count = s.count + 1 in
                      let next_sum = s.sum + data in
                      if s.count < 2
                        then Init ({ count = next_count, sum = next_sum })
                        else Normal (next_sum / next_count)
        | Normal (f) -> Normal (alpha * data + (1 - alpha) * f)
      end
  in
    match result with
      | Init (s) -> s.sum / s.count
      | Normal (f) -> f
    end;;



lastTemp = temp_readings.last().temperature;;
lastTemp_ema = ema lastTemp 3;;


lastTemp_3sec_count = count(lastTemp[3.sec]);;

lastTemp_3sec_sum = sum(lastTemp[3.sec]);;

lastTemp_3sec_avg = avg(lastTemp[3.sec]);;



#! temp_readings
timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
