temp_readings = stream of { room_id:int, temperature:int };;
hum_readings = stream of { room_id:int, humidity:int };;
entries = stream of { room_id:int, product_id:int };;

lastTemp = temp_readings.last(:temperature);;


// .any? on continuous value windows
a = lastTemp[2 sec].any? (fun t -> t > lastTemp);;


// .any? on streams
b = temp_readings.any? (fun ev -> ev.temperature > 45);;


// .any? on event windows
c = temp_readings[2 sec].any? (fun ev -> ev.temperature > lastTemp);;


// .any? on continuous booleans
d = (lastTemp > 30).any?();;


// .any? on continuous boolean windows
e = (lastTemp > 30)[2 sec].any?();;


f = temp_readings.groupby(:room_id,
                          fun g -> (g.last(:temperature) > 25).any?());;

#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23

#! entries
Timestamp, room_id, product_id
3,               1,          1
4,               1,          2
6,               2,          2
7,               1,          3
8,               2,          1
9,               3,          2