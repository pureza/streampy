temp_readings = stream of { room_id:int, temperature:int };;

lastTemp = temp_readings.last().temperature;;


// Recursive function with global dependencies
define fact(n:int) =
  if n == 0
    then lastTemp
    else n + fact (n - 1);;

define x2(n:int) =  n * 2;;

y = when (temp_readings, fun ev -> fun (t:int) -> t + lastTemp.sum() + (if ev.temperature > 30 then fact else x2)(ev.timestamp));;

a = when (temp_readings, fun ev -> y(lastTemp));;

b = when (temp_readings, fun ev -> y(ev.temperature));;

c = when (temp_readings, fun ev -> y((if ev.temperature > 30 then fact else x2)(ev.temperature)));;

d = when (temp_readings, fun ev -> (if ev.temperature > 30 then fact else x2)(y(ev.temperature)));;


#! temp_readings
timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23