temp_readings = stream of { room_id:int, temperature:int };;
hum_readings = stream of { room_id:int, humidity:int };;

lastTemp = temp_readings.last().temperature;;
lastHum = hum_readings.last().humidity;;

// hot depends on ev

hot_readings = temp_readings
                 .where(fun ev -> ev.temperature > 30);;


// all_readings doesn't depend on ev
all_readings = temp_readings
                 .where(fun ev -> 30 > 20);;


// slightly more complex expression that is always true
all_readings2 = all_readings 
                  .where(fun ev -> ev.temperature * 2 == 
                              temp_readings.last().temperature +
                              temp_readings.last().temperature);;

// correlated with humidity
wet_readings = all_readings2 
                 .where(fun ev -> lastHum > 85);;

// The predicate is always true
hot_wet_readings = wet_readings
                     .where (fun ev -> ev.temperature > lastTemp - 1);;


// Apply a filter on a merged stream
merged = merge (temp_readings, hum_readings, :room_id);;

hot_or_wet = [ ev for ev in merged if ev.temperature > 30 or ev.humidity > 85 ];;


// The values of the dictionary are streams.
eventsPerRoom = { g for g in temp_readings group by :room_id };;
minTempRoom1 = eventsPerRoom[1].where(fun ev -> ev.temperature != 23).temperature.min();;


// The values of the dictionary are records with one field that is a stream.
eventsPerRoomb = { { a = g } for g in temp_readings group by :room_id };;
minTempRoom1b = eventsPerRoomb[1].a.where(fun ev -> ev.temperature != 23).temperature.min();;




// Now the filter comes inside the group by
eventsPerRoomc = { { a = g.where(fun ev -> ev.temperature != 23).last().temperature } for g in temp_readings group by :room_id };;

// Same thing but inside the select
eventsPerRoomd = { x.a.where(fun ev -> ev.temperature != 23).last().temperature for x in eventsPerRoomb };;

// Test where with a listenN
temp_plus_hum = 0
         when | ev in temp_readings -> temp_plus_hum + ev.temperature
              | ev in hum_readings  -> temp_plus_hum + ev.humidity;;

where_with_listenN = temp_readings
                       .where (fun ev -> true)
                       .where (fun ev -> true)
                       .where (fun ev -> true)
                       .where (fun ev -> temp_plus_hum % 2 == 0);;

// A simple window
temps_3secs = temp_readings[3.sec];;

// Where after where on event windows
hotTemps_3secsb = temp_readings[3.sec]
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25)
                    .where(fun ev -> ev.temperature > 25);;


// Where after select on event windows (check if it returns a window)
temps_3secsX2b = temps_3secs
                   .select (fun ev -> { tempX2 = ev.temperature * 2 })
                   .where (fun ev -> ev.tempX2 >= 60)
                   .min(:tempX2);;


// The values of the dictionary are event windows.
eventsPerRoome = { g for g in temps_3secs group by :room_id };;
minTempRoom1c = eventsPerRoome[1].where (fun ev -> ev.temperature != 23).min(:temperature);;


// The values of the dictionary are records with one field that is a window.
eventsPerRoomf = { { a = g } for g in temps_3secs group by :room_id };;
minTempRoom1d = eventsPerRoomf[1].a.where (fun ev -> ev.temperature != 23).min(:temperature);;

// g is a window
eventsPerRoomg = { { a = g.where(fun ev -> ev.temperature != 23).min(:temperature) } for g in temps_3secs group by :room_id };;

// Same thing but inside the select
eventsPerRoomh = { x.a.where(fun ev -> ev.temperature != 23).min(:temperature) for x in eventsPerRoomf };;


#! hum_readings
timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23