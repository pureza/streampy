temp_readings = stream of { room_id:int, temperature:int };;
hum_readings = stream of { room_id:int, humidity:int };;

lastTemp = temp_readings.last().temperature;;
lastHum = hum_readings.last().humidity;;

// Current temperature per room
tempsPerRoom = { g.last().temperature for g in temp_readings group by :room_id };;


// The group does not depend on g
lastTempAllRooms = temp_readings
                     .groupby(:room_id, fun g -> lastTemp);;


// The group does not depend on anything!
allRooms20 = temp_readings
               .groupby(:room_id, fun g -> 20);;


// Current temperature per room, with a more complex expression
tempsPerRoom2 = temp_readings
                .groupby(:room_id,
                         fun g -> g.last().temperature + (lastTemp - lastTemp) * 2);;

// The expression depends on hum_readings
lastHumPerRoom = temp_readings
                   .groupby(:room_id,
                            fun g -> lastHum);;

// The expression depends on temp_readings and hum_readings
lastHumLastTempPerRoom = temp_readings
                           .groupby(:room_id, fun g -> g.last().temperature + lastHum);;


// The result is a record
someRecordPerRoom =
  temp_readings
    .groupby(:room_id, fun g -> { a = 5, b = g.last().temperature,
                                  c = lastHum, d = g.last().temperature + lastHum });;


// stream . groupby -> dictionary of dictionary

a = temp_readings
      .groupby (:room_id, fun g -> { a = g.groupby (:temperature, fun g -> g.last().room_id) });;




// stream . groupby -> dictionary of closures
tempsPerRoom3 = temp_readings
                  .groupby (:room_id, fun g -> fun x -> g.last().temperature + x)
                  .select (fun f -> f (0));;

enum EvenOdd =
  | Even of int
  | Odd of int;;


// stream . groupby -> dictionary of variants
evenOrOdd = temp_readings
              .groupby (:room_id, fun g -> let curr = g.last().temperature in
                                           if curr % 2 == 0 then Even(curr) else Odd(curr))
              .select (fun e -> match e with
                                  | Even (v) -> v
                                  | Odd (v) -> 0 - v
                                end);;


// stream . groupby -> dictionary of streams
// (global streams, local ones are already being tested)

b = { temp_readings for g in temp_readings group by :room_id }
      .select (fun s -> s.last().temperature);;

// stream . groupby -> dictionary of event windows
// (global windows, local ones are already being tested)

c = { temp_readings[3.sec] for g in temp_readings group by :room_id }
      .select (fun s -> s.min(:temperature));;

// stream . groupby -> dictionary of dyn val windows

d = { g.last().temperature[3.sec] for g in temp_readings group by :room_id }
      .select (fun s -> s.max());;


// stream . groupby -> dictionary of dyn val windows (global windows)

e = { temp_readings.last().temperature[3.sec] for g in temp_readings group by :room_id }
      .select (fun s -> s.max());;

// Merge both streams
merged = merge (temp_readings, hum_readings, :room_id);;

Room_all = merged
             .groupby (:room_id, fun g -> { temp = g.last().temperature, hum = g.last().humidity });;


// see if a projector handles a stream correctly
f = a[1].a.values().count();;


// the second groupby is called on an initial op
g = temp_readings
      .groupby (:room_id, fun g -> g)
      .where (fun s -> s.last().temperature < 50)
      .select (fun s -> s.groupby (:temperature, fun g -> temp_readings.last().temperature).values().sum());;


#! hum_readings
timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
