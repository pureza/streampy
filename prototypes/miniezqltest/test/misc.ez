temp_readings = stream of { room_id:int, temperature:int };;


enum State =
  | Event of 'a
  | NoEvent;;


define select s f =
  match s with
  | Event ev -> Event (f ev)
  | NoEvent -> NoEvent ()
  end;;


define toStream s =
  let r = NoEvent ()
    when ev in s -> Event ev
  in
    r;;



a = toStream temp_readings;;

b = select a (fun (ev:{ timestamp:int, room_id:int, temperature:int }) ->
                            { timestamp = ev.timestamp, tx2 = ev.temperature * 2 });;

//when (a.changes(), fun _ -> print a);;
when (b.changes(), fun _ -> print b);;
//when (c.changes(), fun _ -> print c);;

#! temp_readings
timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
