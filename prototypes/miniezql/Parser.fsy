%{
open Ast
%}

%start TopLevel
%start Expr
%start Type

%token <string> ID
%token <int> INTEGER_LITERAL
%token <single> FLOAT_LITERAL
%token <bool> BOOLEAN_LITERAL
%token <string> STRING_LITERAL
%token LET IN IF THEN ELSE FUN DOT DEFINE WHEN FOR GROUP BY
%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET ASSIGN
%token COLON SEMICOLON ARROW PLUS MINUS TIMES DIV MOD COMMA
%token SEMICOLON2 UNDERSCORE ENUM PIPE OF MATCH WITH END
%token GT GTE EQ DIFF LTE LT AND OR TRUE FALSE NULL
%token EOF
%token INT FLOAT BOOL STRING APOSTROPHE

%nonassoc LET IN
%right ARROW
%right SEMICOLON
%nonassoc IF THEN ELSE
%left OR
%left AND
%left EQ DIFF
%left GT GTE LTE LT
%left PLUS MINUS
%left TIMES DIV MOD
%left DOT
%nonassoc LPAREN LBRACKET RPAREN RBRACKET


%type <prog list> TopLevel
%type <expr> Expr
%type <Type> Type

%%

TopLevel:
  | EOF                                                             { [] }
  | ExprTop                                                         { $1 }
  | DefTop                                                          { $1 }
  | DefTypeTop                                                      { $1 }
  | DefunTop                                                        { $1 }
  | StreamDefTop                                                    { $1 }


DefTop:
  | Def EOF                                                         { [$1] }
  | Def SEMICOLON2 TopLevel                                         { $1::$3 }


Def:
  | ID ASSIGN Expr                                                  { Def (Identifier $1, $3, None) }
  | ID ASSIGN Expr WHEN PipeOpt Listeners                           { Def (Identifier $1, $3, Some $6) }



// Variants
DefTypeTop:
  | DefType EOF                                                     { [$1] }
  | DefType SEMICOLON2 TopLevel                                     { $1::$3 }

DefType: ENUM ID ASSIGN Variants                                    { (DefVariant (Identifier $2, $4)) }

Variants:
  | Variant Variants                                                { $1::$2 }
  | Variant                                                         { [$1] }

Variant:
  | PIPE ID                                                         { (Identifier $2, TyUnit) }
  | PIPE ID OF Type                                                 { (Identifier $2, $4) }


StreamDefTop:
  | StreamDef EOF                                                   { [$1] }
  | StreamDef SEMICOLON2 TopLevel                                   { $1::$3 }

StreamDef: ID ASSIGN ID OF RecordType                               { if $3 = "stream"
                                                                        then StreamDef (Identifier $1, $5)
                                                                        else failwithf "Expecting 'stream' but got %s" $3 }

DefunTop:
  | Defun EOF                                                       { [$1] }
  | Defun SEMICOLON2 TopLevel                                       { $1::$3 }

Defun: DEFINE ID Parameters ASSIGN Expr                             { Function (Identifier $2, $3, $5) }

ExprTop:
  | Expr EOF                                                        { [Expr $1] }
  | Expr SEMICOLON2 TopLevel                                        { (Expr $1)::$3 }


Expr:
  | Expr DOT ID                                                     { MemberAccess ($1, Identifier $3) }
  | Expr DOT ID LPAREN Args RPAREN                                  { MethodCall ($1, Identifier $3, $5) }
  | Expr LBRACKET Expr RBRACKET                                     { ArrayIndex ($1, $3) }
  | App                                                             { $1 }
  | NonApp                                                          { $1 }
  | FUN Parameters ARROW Expr                                       { Lambda ($2, $4) }
  | Expr SEMICOLON Expr                                             { Seq ($1, $3) }
  | BinaryExpr                                                      { $1 }
  | IF Expr THEN Expr ELSE Expr                                     { If ($2, $4, $6) }
  | MATCH Expr WITH MatchCases END                                  { Match ($2, $4) }
  | LET SimplePattern ASSIGN Expr IN Expr                           { Let ($2, None, $4, $6) }
  | LET SimplePattern ASSIGN Expr WHEN PipeOpt Listeners IN Expr    { LetListener ($2, None, $4, $7, $9) }
  | WHEN Tuple                                                      { FuncCall (Id (Identifier "when"), $2) } // When is both a keyword and a function
  | Comprehension                                                   { $1 }


App:
  | App NonApp                                                      { FuncCall ($1, $2) }
  | NonApp NonApp                                                   { FuncCall ($1, $2) }

NonApp:
  | Record                                                          { $1 }
  | Tuple                                                           { $1 }
  | Symbol                                                          { SymbolExpr $1 }
  | ID                                                              { Id (Identifier $1) }
  | INTEGER_LITERAL                                                 { Integer $1 }
  | FLOAT_LITERAL                                                   { Float $1 }
  | BOOLEAN_LITERAL                                                 { Bool $1 }
  | STRING_LITERAL                                                  { String $1 }
  | LPAREN Expr RPAREN                                              { $2 }
  | NULL                                                            { Null }
  | LPAREN RPAREN                                                   { Unit }


BinaryExpr:
  | Arith                                                           { $1 }
  | Conditional                                                     { $1 }

Arith:
  | Expr PLUS  Expr                                                 { BinaryExpr (Plus, $1, $3) }
  | Expr MINUS Expr                                                 { BinaryExpr (Minus, $1, $3) }
  | Expr TIMES Expr                                                 { BinaryExpr (Times, $1, $3) }
  | Expr DIV   Expr                                                 { BinaryExpr (Div, $1, $3) }
  | Expr MOD   Expr                                                 { BinaryExpr (Mod, $1, $3) }

Conditional:
  | Expr GT   Expr                                                  { BinaryExpr (GreaterThan, $1, $3) }
  | Expr GTE  Expr                                                  { BinaryExpr (GreaterThanOrEqual, $1, $3) }
  | Expr EQ   Expr                                                  { BinaryExpr (Equal, $1, $3) }
  | Expr DIFF Expr                                                  { BinaryExpr (NotEqual, $1, $3) }
  | Expr LTE  Expr                                                  { BinaryExpr (LessThanOrEqual, $1, $3) }
  | Expr LT   Expr                                                  { BinaryExpr (LessThan, $1, $3) }
  | Expr AND  Expr                                                  { BinaryExpr (And, $1, $3) }
  | Expr OR   Expr                                                  { BinaryExpr (Or, $1, $3) }

MatchCases:
  | MatchCase MatchCases                                            { $1::$2 }
  | MatchCase                                                       { [$1] }

MatchCase: PIPE Pattern ARROW Expr                                  { MatchCase ($2, $4) }

Symbol: COLON ID                                                    { Symbol $2 }

Type:
  | INT                                                             { TyInt }
  | FLOAT                                                           { TyInt } // This is cheating
  | BOOL                                                            { TyBool }
  | STRING                                                          { TyString }
  | Type ARROW Type                                                 { TyArrow ($1, $3) }
  | RecordType                                                      { $1 }
  | TupleType                                                       { $1 }
  | LPAREN Type RPAREN                                              { $2 }
  | ID                                                              { if $1 = "unit" then TyUnit else TyAlias $1 }
  | APOSTROPHE ID                                                   { let h = hash $2 in
                                                                      let h' = if h > 0
                                                                                 then 0 - h
                                                                                 else h in
                                                                      TyGen h' }
  | LBRACKET Type RBRACKET                                          { TyWindow $2 }
  | ID LT Type GT                                                   { match $1 with
                                                                      | "stream" -> TyStream $3
                                                                      | _ -> failwithf "Unknown generic type: %s" $1 }


RecordType: LBRACE FieldTypes RBRACE                                { TyRecord (Map.of_list $2) }

FieldTypes: ID COLON Type MoreFieldTypes                            { ($1, $3)::$4 }

MoreFieldTypes:
  |                                                                 { [] }
  | COMMA ID COLON Type MoreFieldTypes                              { ($2, $4)::$5 }


TupleType: LPAREN Type COMMA Type MoreTupleElts RPAREN              { TyTuple ($2::$4::$5) }

MoreTupleElts:
  |                                                                 { [] }
  | COMMA Type MoreTupleElts                                        { $2::$3 }


MoreTypes:
  |                                                                 { [] }
  | COMMA Type MoreTypes                                            { $2::$3 }

// (), id or id1 id2 ... idN
Parameters:
  | LPAREN RPAREN                                                   { [] }
  | Parameter MoreParams                                            { $1::$2 }

MoreParams:
  |                                                                 { [] }
  | Parameter MoreParams                                            { $1::$2 }

Parameter:
  | SimplePatternEnclosed                                           { Param ($1, None) }
  | LPAREN ID COLON Type RPAREN                                     { Param (Id (Identifier $2), Some $4) }

// Records: { a = 1, b = ... }

// Zero or more, comma-separated expressions
Args:
  |                                                       { [] }
  | Expr MoreArgs                                         { $1::$2 }

MoreArgs:
  |                                                       { [] }
  | COMMA Expr MoreArgs                                   { $2::$3 }

Record:
  | LBRACE InitList RBRACE                                          { Record $2 }

InitList: ID ASSIGN Expr MoreInits                                  { ($1, $3)::$4 }

MoreInits:
  |                                                                 { [] }
  | COMMA ID ASSIGN Expr MoreInits                                  { ($2, $4)::$5 }

// Tuples: (a, b, c, ...)
Tuple: LPAREN Expr COMMA Expr MoreCSExprs RPAREN                    { Tuple ($2::$4::$5) }

MoreCSExprs:
  |                                                                 { [] }
  | COMMA Expr MoreCSExprs                                          { $2::$3 }


// Pattern matching
Pattern:
  | SimplePattern                                                   { $1 }
  | SimplePattern COMMA Expr                                        { If ($3, $1, Bool false) }  // This is not an IF, because $1 must be evaluated before $3,
                                                                                                 // but I want to avoid creating useless grammar rules.

SimplePattern:
  | ID SimplePatternEnclosed                                        { FuncCall (Id (Identifier $1), $2) }
  | CommonPatterns                                                  { $1 }

// If the pattern is a variant match, then it must be
// enclosed in parenthesis
SimplePatternEnclosed: CommonPatterns                               { $1 }

CommonPatterns:
  | RecordPat                                                       { $1 }
  | TuplePat                                                        { $1 }
  | ID                                                              { Id (Identifier $1) }
  | UNDERSCORE                                                      { Id (Identifier "_") }
  | INTEGER_LITERAL                                                 { Integer $1 }
  | FLOAT_LITERAL                                                   { Float $1 }
  | BOOLEAN_LITERAL                                                 { Bool $1 }
  | STRING_LITERAL                                                  { String $1 }
  | LPAREN SimplePattern RPAREN                                     { $2 }


RecordPat: LBRACE InitListPat RBRACE                                { Record $2 }

InitListPat: ID ASSIGN SimplePattern MoreInitsPat                   { ($1, $3)::$4 }

MoreInitsPat:
  |                                                                 { [] }
  | COMMA ID ASSIGN SimplePattern MoreInits                         { ($2, $4)::$5 }


TuplePat: LPAREN SimplePattern COMMA SimplePattern MoreCSPats RPAREN  { Tuple ($2::$4::$5) }

// Comma separated patterns
MoreCSPats:
  |                                                                 { [] }
  | COMMA SimplePattern MoreCSExprs                                 { $2::$3 }


// Listeners
Listeners:
  | Listener                                                        { [$1] }
  | Listener PIPE Listeners                                         { $1::$3 }

Listener:
  | ID IN Expr OptGuard ARROW Expr                                  { Listener (Some (Identifier $1), $3, $4, $6) }
  | Expr OptGuard ARROW Expr                                        { Listener (None, $1, $2, $4) }


PipeOpt:
  |                                                                 { [] }
  | PIPE                                                            { [] }


OptGuard:
  |                                                                 { None }
  | Guard                                                           { Some $1 }

Guard: IF Expr                                                      { $2 }


Comprehension:
  | DictionaryComprehension                                         { $1 }
  | StreamComprehension                                             { $1 }

StreamComprehension:
  | LBRACKET Expr FOR ID IN Expr RBRACKET                           { MethodCall ($6, Identifier "select", [Lambda ([Param (Id (Identifier $4), None)], $2)]) }
  | LBRACKET Expr FOR ID IN Expr IF Expr RBRACKET                   { MethodCall (MethodCall ($6, Identifier "where", [Lambda ([Param (Id (Identifier $4), None)], $8)]),
                                                                                  Identifier "select",
                                                                                  [Lambda ([Param (Id (Identifier $4), None)], $2)]) }

DictionaryComprehension:
  | LBRACE Expr FOR ID IN Expr RBRACE                               { MethodCall ($6, Identifier "select", [Lambda ([Param (Id (Identifier $4), None)], $2)]) }
  | LBRACE Expr FOR ID IN Expr IF Expr RBRACE                       { MethodCall (MethodCall ($6, Identifier "where", [Lambda ([Param (Id (Identifier $4), None)], $8)]),
                                                                                  Identifier "select",
                                                                                  [Lambda ([Param (Id (Identifier $4), None)], $2)]) }
  | LBRACE Expr FOR ID IN Expr GROUP BY Expr RBRACE                 { MethodCall ($6, Identifier "groupby", [$9; Lambda ([Param (Id (Identifier $4), None)], $2)]) }