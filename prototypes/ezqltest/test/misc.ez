stocks = stream (:symbol, :price);;

entity Company =
  createFrom stocks

  member self.qty = 0
  member self.profit = 0
  member self.buyPrice = 0
  member self.sellPrice = 0
  
  member self.sell() =
    self.profit += (self.price - self.buyPrice) * self.qty
    self.sellPrice = self.price
    self.qty = 0

  member self.buy(n) =
    self.profit -= n * self.price
    self.qty += n
    self.buyPrice = self.price;;


toSell = Company.where (c -> c.totalQty > 0 && (c.price > c.buyPrice * 1.03 or c.price < c.buyPrice * 0.98));;

when (toSell.updated(), ev -> for c in toSell
                                c.sell());;

balance = initialBalance + Company.all.select (c -> c.profit).sum();;


toBuy = Company.where (c -> c.price > 1.03 * c.price@(3 days));;

when (toBuy.updated(), ev -> for c in toSell
                               if c.price * 10 < balance then c.buy(10));;

#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23

#! entries
Timestamp, room_id, product_id
3,               1,          1
4,               1,          2
6,               2,          2
7,               1,          3
8,               2,          1
9,               3,          2