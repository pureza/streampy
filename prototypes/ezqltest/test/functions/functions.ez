temp_readings = stream (:room_id, :temperature);;

lastTemp = temp_readings.last(:temperature);;


// Test:
//  - Functions with several parameters
//  - Passing anonymous functions as parameters to other functions.
a = let g = fun (a:int) (f:int -> int) -> f(a) in
    g (lastTemp, fun (x:int) -> lastTemp + x);;




// Test:
//  - Functions that return functions
//  - Closures
//  - Currying
//  - Passing records to functions
b = let g = fun (t:int) -> fun (u:{ a:int }) -> t * (u.a[2 sec].sum()) in
    let u = g (1) in
    u ({ a = lastTemp });;


// Test:
//  - Record fields containing functions
c = let z = { a = { b = { c = fun (t:int) -> t } } } in
    (z.a.b.c)(lastTemp);;


// Test:
//  - Record fields containing functions that return functions
d = let z = { a = fun (x:int) -> fun (y:int) -> x + y } in
    z.a(lastTemp)(1);;


// Recursive function with global dependencies
define fact(n:int) : int =
  if n == 0
    then lastTemp
    else n + fact (n - 1);;

e = fact(lastTemp);;


// Non-recursive function with global deps
define x2a(n:int) : int = n.sum() + lastTemp;;


f = x2a(lastTemp);;



// This function returns a recursive function taken from a record field
something = let factorial : int -> int = fun (n:int) -> if n == 0 then lastTemp else n + factorial (n - 1) in
            { a = factorial }.a;;

// Test recursive functions that come from record fields
g = something (lastTemp);;



// Decide which function to call depending on lastTemp
h = let x2 = fun (n:int) -> n.sum() in
    (if lastTemp > 25 then fact else x2)(lastTemp);;


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23