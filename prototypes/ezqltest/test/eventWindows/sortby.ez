temp_readings = stream (room_id:int, temperature:int);;
hum_readings = stream (room_id:int, humidity:int);;


sorted_temps3sec = temp_readings[1 min]
                     .sortBy(:temperature);;

tempsPerRoom = { { room_id = g.last(:room_id), temperature = g.last(:temperature) } for g in temp_readings group by :room_id };;

sortedRooms = tempsPerRoom.values().sortBy(:temperature).sortBy(:room_id);;

sortedTemps = tempsPerRoom.select (fun r -> r.temperature)
                          .values().sort();;

sortedlastTemp_1min = temp_readings.last(:temperature)[1 min].sort();;


//when (temp_readings, fun _ -> print (sortedRooms));;

#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23

