temp_readings = stream (:room_id, :temperature);;
hum_readings = stream (:room_id, :humidity);;

lastTemp = temp_readings.last(:temperature);;
lastHum = hum_readings.last(:humidity);;


// hot depends on ev

temp_readingsX2 = [ { temperatureX2 = ev.temperature * 2 } for ev in temp_readings ];;


// Doesn't depend on ev
just10 = [ { a = 10 } for ev in temp_readings ];;

combination = temp_readings
                .select(fun ev -> { a = ev.temperature * 2, b = 10, c = lastHum });;

// select + where
complex = temp_readings
            .where (fun ev -> ev.temperature >= 30)
            .select (fun ev -> { a = ev.temperature * 2, b = 10, c = lastHum })
            .where (fun ev -> ev.c > 80);;


// select + select
temp_readingsX4 = temp_readingsX2
                    .select (fun ev -> { temperatureX4 = ev.temperatureX2 * 2 });;


// merge . select
merged = merge (temp_readings, hum_readings, :room_id);;

mergedTempX2 = [ { tempX2 = ev.temperature * 2 } for ev in merged ];;



// Indexer . select
eventsPerRoom = { g for g in temp_readings group by :room_id };;
minTempRoom1 = eventsPerRoom[1].select(fun ev -> { tempX2 = ev.temperature * 2 }).min(:tempX2);;


// Projector . select
eventsPerRoomb = { { a = g } for g in temp_readings group by :room_id };;
minTempRoom1b = eventsPerRoomb[1].a.select(fun ev -> { tempX2 = ev.temperature * 2 }).min(:tempX2);;


// GroupBy's g . select
eventsPerRoomc = { { a = g.select(fun ev -> { tempX2 = ev.temperature * 2 }).last(:tempX2) } for g in temp_readings group by :room_id };;

// initial op . select
eventsPerRoomd = { x.a.select(fun ev -> { tempX2 = ev.temperature * 2 }).last(:tempX2) for x in eventsPerRoomb };;



// A simple window
temps_3secs = temp_readings[3 sec];;

// Where after where on event windows
tempsX8_3secs = temp_readings[3 sec]
                   .select (fun ev -> { tempX2 = ev.temperature * 2})
                   .select (fun ev -> { temp = ev.tempX2 / 2})
                   .select (fun ev -> { tempX2 = ev.temp * 2});;


// Indexer . select (event windows)
eventsPerRoome = { g for g in temps_3secs group by :room_id };;
minTempRoom1c = eventsPerRoome[1].select(fun ev -> { tempX2 = ev.temperature * 2}).min(:tempX2);;


// Porjector . select (event windows)
eventsPerRoomf = { { a = g } for g in temps_3secs group by :room_id };;
minTempRoom1d = eventsPerRoomf[1].a.select(fun ev -> { tempX2 = ev.temperature * 2}).min(:tempX2);;


// GroupBy's g . select (event windows)
eventsPerRoomg = { { a = g.select(fun ev -> { tempX2 = ev.temperature * 2}).min(:tempX2) } for g in temps_3secs group by :room_id };;

// initial op . select (event windows)
eventsPerRoomh = { x.a.select(fun ev -> { tempX2 = ev.temperature * 2}).min(:tempX2) for x in eventsPerRoomf };;


// listenN . select

// Test where with a listenN
temp_plus_hum = 0
         when | ev in temp_readings -> temp_plus_hum + ev.temperature
              | ev in hum_readings  -> temp_plus_hum + ev.humidity;;

select_with_listenN = temp_readings
                        .select (fun ev -> { tempX2 = ev.temperature * 2 })
                        .select (fun ev -> { temp   = ev.tempX2 / 2 })
                        .select (fun ev -> { tempX2 = ev.temp * 2 })
                        .select (fun ev -> { a = temp_plus_hum + ev.tempX2 });;


#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
