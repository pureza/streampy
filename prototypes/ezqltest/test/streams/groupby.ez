temp_readings = stream (:room_id, :temperature);;
hum_readings = stream (:room_id, :humidity);;

lastTemp = temp_readings.last(:temperature);;
lastHum = hum_readings.last(:humidity);;

// Current temperature per room
tempsPerRoom = temp_readings
                 .groupby(:room_id, g -> g.last(:temperature));;


// The group does not depend on g
lastTempAllRooms = temp_readings
                     .groupby(:room_id, g -> lastTemp);;


// The group does not depend on anything!
allRooms20 = temp_readings
               .groupby(:room_id, g -> 20);;


// Current temperature per room, with a more complex expression
tempsPerRoom2 = temp_readings
                .groupby(:room_id,
                         g -> g.last(:temperature) + (lastTemp - lastTemp) * 2);;

// The expression depends on hum_readings
lastHumPerRoom = temp_readings
                   .groupby(:room_id,
                            g -> lastHum);;

// The expression depends on temp_readings and hum_readings
lastHumLastTempPerRoom = temp_readings
                           .groupby(:room_id, g -> g.last(:temperature) + lastHum);;


// The result is a record
someRecordPerRoom =
  temp_readings
    .groupby(:room_id, g -> { :a = 5, :b = g.last(:temperature),
                              :c = lastHum, :d = g.last(:temperature) + lastHum });;


#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
