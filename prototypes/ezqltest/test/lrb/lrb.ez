seg_speed_str = stream (:vehicle_id, :speed, :segment_id);;

define justNow(x:bool) : bool = x[1 sec][0];;

entity Segment =
   createFrom(seg_speed_str, :segment_id)
   hasMany :vehicles

   member self.avg5mins = seg_speed_str.where(fun ev -> ev.segment_id == self.segment_id)[5 min].avg(:speed)

    // A segment is congested if the speed average reported over the
    // last 5 minutes is less than 40 MPH
   member self.isCongested = if self.avg5mins != null then self.avg5mins < 80 else false

   member self.vehicleCount = self.vehicles.values().count();;


entity Vehicle =
  createFrom(seg_speed_str, :vehicle_id)
  belongsTo :segment

  // The toll is updated whenever the vehicle enters
  // a congested segment
  member self.toll = 0
        when | self.segment_id.changes() ->

                 if Segment.all.select(fun s -> justNow(s.isCongested))[self.segment_id]

 //                if with (self.segment, fun s -> justNow(s.isCongested))

//if self.segment.isCongested[5 min]
//if {self.segment}.isCongested[5 min]

//if Segment.all.select (fun s -> s.isCongested[5 min])[self.segment_id]
//   ...
//   ...

//PRECISO APENAS DE SUBIR O SUFICIENTE PARA ENFIAR A JANELA DENTRO DO SELECT.ALL

//if self.segment.(isCongested[5 min])


//                 if justNow(self.segment::isCongested)              
//                 if justNow(self.segment.isCongested)

                   then self.segment.vehicleCount
                   else 0


  member self.totalToll = self.toll.changes().sum(:value);;



when (seg_speed_str, fun _ -> print (Vehicle.all.select(fun v -> v.totalToll)));;



#! seg_speed_str
timestamp, vehicle_id, speed, segment_id
1,                 10,    70,          1
2,                 20,    80,          1
3,                 10,    90,          2
4,                 30,    71,          1
5,                 20,    81,          2
6,                 30,    91,          2
7,                 10,    72,          3
8,                 20,    82,          3





