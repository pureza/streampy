seg_speed_str = stream (:vehicle_id, :speed, :segment_id);;

entity Segment =
   createFrom(seg_speed_str, :segment_id)
   hasMany :vehicles

    // A segment is congested if the speed average reported over the
    // last 5 minutes is less than 80
   member self.isCongested = let avg5mins = self.events[5 min].avg(:speed) in
                             if avg5mins != null then avg5mins < 80 else false

   member self.vehicleCount = self.vehicles.values().count();;


entity Vehicle =
  createFrom(seg_speed_str, :vehicle_id)
  belongsTo :segment

  // The toll is updated whenever the vehicle enters
  // a congested segment
  member self.toll = 0
        when | self.segment_id.changes() ->
                 if self.segment.isCongested
                   then self.segment.vehicleCount // The real formula is a little bit more complex
                   else 0

  // Whenever the toll is updated (even if it retains the same value
  // -- thus the .updates() instead of .changes()), sum it.
  member self.totalToll = self.toll.updates().sum(:value)


  member self.tollPerSegment = self.segment_id.changes()
                                 .select (fun ev -> { value = ev.value, toll = self.toll })
                                 .groupby (:value, fun g -> g.last(:toll));;


// vehicles per segment
volume = Segment.all.select (fun s -> s.vehicleCount);;

// totalToll per vehicle
total = Vehicle.all.select (fun v -> v.totalToll);;

total2 = Vehicle.all.select (fun v -> v.tollPerSegment.values().sum());;



#! seg_speed_str
timestamp, vehicle_id, speed, segment_id
1,                 10,    70,          1
2,                 20,    80,          1
3,                 10,    90,          2
4,                 30,    71,          1
5,                 20,    81,          2
6,                 30,    91,          2
7,                 10,    72,          3
8,                 20,    82,          3





