temp_readings = stream (:room_id, :temperature);;
hum_readings = stream (:room_id, :humidity);;
entries = stream(:room_id, :product_id);;

entity Product =
  createFrom (entries, :product_id)
  belongsTo :room;;


entity Room =
  createFrom(temp_readings, :room_id)
  hasMany :products

  // How many products are in each room; test aggregates on dictionaries.
  member self.blah = self.products.select(fun p -> p.product_id).values().count();;


when (entries, fun _ -> print (Room.all.select(fun r -> r.blah)));;


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23

#! entries
Timestamp, room_id, product_id
3,               1,          1
4,               1,          2
6,               2,          2
7,               1,          3
8,               2,          1
9,               3,          2