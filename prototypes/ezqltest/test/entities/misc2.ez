temp_readings = stream (:room_id, :temperature);;
hum_readings = stream (:room_id, :humidity);;
entries = stream(:room_id, :product_id);;

temps_and_hum = merge(temp_readings, hum_readings, :room_id);;

entity Room =
  createFrom(temps_and_hum, :room_id);;


entity Product =
  createFrom (entries, :product_id)
  belongsTo :room
  member x.temperature = x.room.temperature
  member x.humidity = x.room.humidity;;


spoiled = Product.all.where(fun p -> (p.temperature > 25 and p.humidity > 90).howLong() >= 10.min);;

when (spoiled.changes(), fun _ -> print (spoiled));;


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
20,              3,      10
30,              3,      40


#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92

#! entries
Timestamp, room_id, product_id
3,               1,          1
4,               1,          2
6,               2,          2
7,               1,          3
8,               2,          1
9,               3,          2