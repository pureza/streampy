temp_readings = stream (room_id:int, temperature:int);;


define sum(n:int) : int =
  listenN(n, when (n.changes(), fun _ -> fun (v:int) -> n + v));;

define count(n:int) : int =
  listenN(0, when (n.changes(), fun _ -> fun (v:int) -> 1 + v));;


define avg(n:int) : int =
  let c = count (n) in
  if c == 0 then 0 else sum (n) / c;;

define max(n:int) : int =
  listenN (n, when (n.changes(), fun _ -> fun (v:int) -> if n > v then n else v));;

when (temp_readings, fun _ -> print(max(temp_readings.last(:temperature))));;

/*

enum xtream =
  | Event of { timestamp:int, room_id:int, temperature:int }
  | NoEvent;;


define select (s:xtream) (fn:{ timestamp:int, room_id:int, temperature:int } -> { timestamp:int, room_id:int, temperature:int }) : xtream =
  match s with
    | Event (ev) -> Event (fn (ev))
    | NoEvent -> NoEvent ()
  end;;


temp_readings2 = NoEvent ()
          when | ev in temp_readings -> Event (ev)
               | ticks -> NoEvent ();;

tempsX2 = select (temp_readings2, fun (ev:{ timestamp:int, room_id:int, temperature:int }) ->
                                            { timestamp = ev.timestamp, room_id = ev.room_id, temperature = ev.temperature * 2 });;

when (tempsX2.changes(), fun _ -> print (tempsX2));;
*/


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
