temp_readings = stream (room_id:int, temperature:int);;


lastTemp = temp_readings.last(:temperature);;


enum EmaState =
  | Init of { count:int, sum:float }
  | Normal of float;;

define ema (data:int) (n:int) : float =
  let alpha = 2 / (n + 1.0) in
  let result = Init ({ count = 0, sum = 0.0 })
    when | data.changes() ->
      match result with
        | Init (s) -> let c = s.count + 1 in
                      if s.count < 2
                        then Init ({ count = c, sum = s.sum + data })
                        else Normal ((s.sum + data) / c)
        | Normal (f) -> Normal (alpha * data + (1 - alpha) * f)
      end
  in
    match result with
      | Init (s) -> s.sum / s.count
      | Normal (f) -> f
    end;;





lastTemp_ema = ema(lastTemp, 3);;

when (temp_readings, fun _ -> print ("the ema: " + lastTemp_ema));;


/*

enum xtream =
  | Event of { timestamp:int, room_id:int, temperature:int }
  | NoEvent;;


define select (s:xtream) (fn:{ timestamp:int, room_id:int, temperature:int } -> { timestamp:int, room_id:int, temperature:int }) : xtream =
  match s with
    | Event (ev) -> Event (fn (ev))
    | NoEvent -> NoEvent ()
  end;;


temp_readings2 = NoEvent ()
          when | ev in temp_readings -> Event (ev)
               | ticks -> NoEvent ();;

tempsX2 = select (temp_readings2, fun (ev:{ timestamp:int, room_id:int, temperature:int }) ->
                                            { timestamp = ev.timestamp, room_id = ev.room_id, temperature = ev.temperature * 2 });;

when (tempsX2.changes(), fun _ -> print (tempsX2));;
*/

#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
