temp_readings = stream (room_id:int, temperature:int);;
hum_readings = stream (room_id:int, humidity:int);;
entries = stream (room_id:int, product_id:int);;

entity Product =
  createFrom (entries, :product_id)
  belongsTo :room;;


entity Room =
  createFrom(temp_readings, :room_id)
  hasMany :products

  member self.productIds = self.products.select (fun p -> p.product_id)

  // How many products are in each room; test aggregates on dictionaries.
  member self.prodCount = self.products.select(fun p -> p.product_id).values().count();;

productIdsPerRoom = Room.all.select (fun r -> r.productIds);;

totalProductsPerRoom = Room.all.select (fun r -> r.prodCount);;

#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23

#! entries
Timestamp, room_id, product_id
3,               1,          1
4,               1,          2
6,               2,          2
7,               1,          3
8,               2,          1
9,               3,          2