temp_readings = stream (room_id:int, temperature:int);;
hum_readings = stream (room_id:int, humidity:int);;

lastTemp = temp_readings.last(:temperature);;
lastHum = hum_readings.last(:humidity);;

// Current temperature per room
tempsPerRoom = temp_readings
                 .groupby(:room_id, fun g -> g.last(:temperature));;

// Predicate depends on t
hotRooms = tempsPerRoom.where (fun t -> t > 30);;

// Test if where propagates changes well
hotRooms2 = hotRooms.where(fun t -> t > 30);;

// Now the predicate doesn't depend on t
hotRooms3 = hotRooms2.where(fun t -> 1 > 0);;

// In this example, 3 will be removed by the parents
// at the exact same time this predicate becomes true
hotRooms4 = hotRooms3.where(fun t -> t == 30);;

// The predicate depends on t and on an external variable
hoterThanLast = tempsPerRoom.where(fun t -> t > lastTemp);;

// Same thing, but with a more complex expression
hoterThanLast2 = tempsPerRoom.where(fun t -> t * 2 > temp_readings.last(:temperature) * 2 - 1 + 1);;

// Depends on t and on another stream
tempGTHalfHumidity = tempsPerRoom.where(fun t -> t * 2 > lastHum);;

// Depends only on an external variable
lastHoterThan25 = tempsPerRoom.where(fun t -> lastTemp > 25);;

#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
