temp_readings = stream (:room_id, :temperature);;
hum_readings = stream (:room_id, :humidity);;

lastTemp = temp_readings.last(:temperature);;
lastHum = hum_readings.last(:humidity);;

// Current temperature per room
tempsPerRoom = temp_readings
                 .groupby(:room_id, g -> g.last(:temperature));;



// Projector depends on t
tempsPerRoomX2 = tempsPerRoom.select (t -> t * 2);;

// Projector depends on t and lastTemp
tempsPerRoomX2b = tempsPerRoom.select (t -> t * 2 + lastTemp);;

// Projector doesn't depend on anything
always3 = tempsPerRoom.select (t -> 3);;

// Depends on an external variable
lastTempAllRooms = tempsPerRoom.select (t -> lastTemp);;



// The result is a record
someRecordPerRoom =
  tempsPerRoom
    .select (t -> { :a = 5, :b = t, :c = lastHum, :d = t + lastHum + lastTemp });;



// Where + select
hotRoomsX2 = tempsPerRoom
               .where(t -> lastTemp > 25)
               .select (t -> t * 2);;

weird = temp_readings
          .groupby(:room_id, g -> 3)
          .where(t -> lastTemp > 25)
          .select (t -> lastTemp);;

nestedSelect = weird.select(t -> { :a = 3, :b = t });;


#! hum_readings
Timestamp, room_id, humidity
0,         1, 70
1,         2, 80
2,         3, 90
3,         1, 71
4,         2, 81
5,         3, 91
6,         1, 72
7,         2, 82
8,         3, 92


#! temp_readings
Timestamp, room_id, temperature
2,               1,      25
4,               3,      45  # Out-of-order keys (1, 3, 2 instead of 1, 2, 3)
5,               1,      25  # Retain the previous value
6,               2,      50
7,               3,      30
9,               1,      23
