- Considera que tens uma única stream de dados à entrada. Esta representa o valor corrente de acções na bolsa. Tem três campos: ":tick" (representa o símbolo da cotação), ":value" (representa o preço corrente), ":volume" (representa o número de acções vendidas no último lot, ao preço especificado).

Agora tenta exprimir coisas como:
1) Para uma dada acção (:tick = "AAPL"), imprime os preços que estão a chegar

input.filter { |a| a.tick == "AAPL" } >> print
input ~ (:tick => "APPL") >> print


2) Para uma dada acção (:tick = "AAPL"), imprime o preço médio dos últimos 5 minutos

input[5.min].filter { |a| a.tick == "AAPL" }.avg(:value) >> print
input[5.min] ~ (:tick => "APPL") >> avg(:value) >> print
input ~ (:timestamp < 5.min.ago, :tick => "APPL") >> avg(:value) >> print


3) Para uma dada acção (:tick = "AAPL"), imprime o preço médio das últimas 5 samples (valores)

input[0..4].filter { |a| a.tick == "AAPL" }.avg(:value) >> print
input[0..4] ~ (:tick => "APPL") >> avg(:value) >> print


4) Repetir 1, 2 e 3 para todas as acções que estão a chegar

input >> print


input[5.min].groupby(:tick) { |s| s.avg(:value) >> print }
input[5.min] ~ (:tick => tick) >> print avg(:value) # O operador ~ faz um filtro para cada tick, logo neste caso e' igual a um groupby.


input[0..4].groupby(:tick) { |s| s.avg(:value) >> print }
input[0..4] ~ (:tick => tick) >> print avg(:value) # O operador ~ faz um filtro para cada tick, logo neste caso e' igual a um groupby.


5) Para todas as acções, encontrar aquelas cujo preço aumentou mais de 2% nos últimos 5 minutos

valores_ha_5_mins = input[> 5.min].partitionby(:tick) { |s| s.last() } # Vai buscar o ultimo valor ate ha 5 min atras
valores_actuais   = input.partitionby(:tick) { |s| s.last() }

valores_actuais.join(valores_ha_5_mins, :tick).filter { |s| s.a::value > s.b::value * 1.02 } >> print

valores_ha_5_mins ~ (:tick => tick, :value => value) and valores_actuais ~ (:tick => tick, :value >= value * 1.02) >> print

Talvez faca sentido um operador lastby():

valores_ha_5_mins = input[> 5.min].lastby(:tick)
valores_actuais   = input.lastby(:tick)


6) Para uma dada acção (:tick = "AAPL"), calcular a média de preços dos últimos 30 dias e a média de preços dos últimos 5. Caso a média dos últimos 5 ultrapasse a média dos últimos 30, emitir uma operação "Comprar". (Este é um exemplo típico).

media_30_dias = input[30.days].groupby(:tick) { |s| s.avg(:value) }
media_05_dias = input[05.days].groupby(:tick) { |s| s.avg(:value) }

media_30_dias.join(media_05_dias) { |v| if (v[1] > v[0]) COMPRA }

ou

for tick in media_30_dias.keys
    if media_30_dias[tick] > media_05_dias[tick]
        COMPRA
    end
end

ou

media_30_dias ~ (:tick => ?t, :value => ?v) and media_05_dias ~ (:tick == ?t, :value >= ?v) >> compra


7) A mesma coisa do que 6, mas em que o declive de aumento de preço dos últimos 30 e 5 dias é positivo (i.e. os preços estão a subir).

# (Preco actual - Preco ha X dias) / numero de dias
declive_30_dias = input[30.days].groupby(:tick) { |s| (s.last.value - s.first.value) / days_between(s.first, s.last) }
declive_05_dias = input[05.days].groupby(:tick) { |s| (s.last.value - s.first.value) / days_between(s.first, s.last) }

declive_30_dias ~ (:value >= 0) and declive_05_dias ~ (:value >= 0) >> compra


8) A mesma coisa do que em 7, mas em que o declive de aumento de preços dos últimos 5 dias é superior a 2%/dia.

declive_30_dias ~ (:value >= 0) and declive_05_dias ~ (:value >= 2) >> compra


9) A mesma coisa do que em 8, mas em que o volume, caso esteja a cair, não cai abaixo de 10.000. (Isto é muito comum: tu só queres comprar uma acção que está a aumentar de preço se ainda existir muita gente a vender. Isto porque, podes querer vender a seguir.)

input ~ (:volume > 10000)


10) Repetir 5-9, mas detectando todas as acções que se encontram nesta situação.
11) Para comprar acções, um dos indicadores mais simples que se pode usar é uma MACD (http://en.wikipedia.org/wiki/MACD). Basicamente, a MACD é uma diferença entre duas médias móveis. Depois, é necessário fazer uma média móvel das médias móveis. Sempre que a diferença de médias móveis ultrapassa a segunda média móvel (signal), isso pode sinalizar uma compra. Exprime este indicador na tua linguagem, encontrando entre todas as acções aquelas que estão a sinalizar "comprar".

medias_diarias = input[26.days].groupby(:tick, :day) { |s| s.avg(:value) }
    => { (:tick, :day) => avg(:value) }

ema_12 = medias_diarias.groupby(:tick) { |s| s[12].ema(:value) }
ema_26 = medias_diarias.groupby(:tick) { |s| s[26].ema(:value) }
    => { :tick => ema(:value) }

# O macd do tick :tick no dia the_day e' ...
macd = ema_12.join(ema_26) { |s| :day => the_day, :value => s[0] - s[1] }
    => { :tick => (day, macd) }

# O signal do tick :tick no dia the_day e' ...
signal = macd.groupby(:tick) { |s| (the_day, s[9].ema()) }




def ema(tick, start, days)
    medias_diarias[tick][start - days .. start].ema(:value)
end

def macd(tick, start, days_fast, days_slow)
    ema(tick, start, days_fast) - ema(tick, start, days_slow)
end

def signal(tick, days)
    macd(tick, days, 12, 26).ema()
end

if macd("AAPL", today, 12, 26) > signal("AAPL", 9) ...




ema = medias_diarias.ema(:value)
macd = ema[12.days] - ema[26.days]
signal = macd[9.days].ema()


medias_diarias = input.groupby(:tick, :day) { |s| s.avg(:value) }
    => { (:tick, :day) => avg(:value) }


# medias_diarias[:tick => tick] devolve a média diária das acções de um determinado tick
# ...[days.days] devolve apenas as médias dos últimos X dias
# ....ema(:value) pega nas médias todas e faz um EMA dos valores.
ema(tick, days) = medias_diarias[:tick => tick][days.days].ema(:value)


ema("AAPL", 12)
    => ema da Apple nos últimos 12 dias

ema("AAPL", 12)@1.day - ema() de ontem
ema("AAPL", 12)@1.year - ema() de ha um ano atrás


# Aqui estamos a subtrair duas streams... O resultado vai ser uma stream?
# Se sim, os valores da stream são os macd's imediatamente anteriores, ou os do dias anteriores...?
def macd(tick, days_fast, days_slow)
    ema(tick, days_fast) - ema(tick, days_slow)
end


def signal(tick, days)
    macd(tick, 12, 26).ema()
end


# E uma cena tipo J?
def signal(tick, days)
    (macd(tick, 12, 26) @ 0 .. 9).ema()
    ou
    0 .. 9.map { |i| macd(tick, 12, 26) @ i }.ema()
end

# Desvantagem? Já não podemos pensar na função macd() como uma stream...
# O que eu gostava mesmo é que a função macd() fosse uma stream com os macds dos últimos dias... assim bastava fazer macd(...).ema().
# Mas quando surge um novo valor, o macd altera-se. Assim, o penultimo valor deverá passar a ser o valor anterior ou esse deve-se perder e o penultimo deve ser o valor de ontem? Pode-se fazer um partitionby e guardar o último de cada dia... UGLY

# Outra hipotese:

def macd(tick, days_fast, days_slow) : daily
    ema(tick, days_fast) - ema(tick, days_slow)
end

# daily significa que o macd muda diariamente e assim macd[-1] ia buscar o de ontem...

# Uma alternativa...
daily macd(tick, days_fast, days_slow)
    ema(tick, days_fast) - ema(tick, days_slow)
end


# E se quiseres fazer um ema() das emas() ?
# ema("AAPL", 12).ema()
# ema() vai acender a stream[-1].
# Não será mais natural fazer

(ema("AAPL", 12) @ 0 .. 9).ema() ?!

# Pelo menos é menos magia...
# Mas ema(...) @ 1 significa o valor de ema exactamente há 24 horas ou no final do dia de ontem?

Eu quero pensar no macd(), avg(), ema(), etc, como streams, para poder fazer, por exemplo macd(...).ema(). Mas como dizer que o macd só deve guardar o último valor do dia??? Isto é, que macd[-1] é o macd de ontem e não o macd anterior... E se não quisermos guardar o último, mas outro qualquer? Se usarmos aquele daily, o operador @ desaparece? Eu gosto do @ ...

Pensando melhor, talvez macd[-1] ser o macd de ontem não seja muito boa ideia. Então como ir buscar o de ontem?

E se fizermos apenas:

macd(...)[9.days].latestby(:day).ema(...)

== CONCLUSÃO (ou nao) ==
  
A stream ema(...) só vai ser alterada uma vez por dia, ao fim do dia (porque nós não queremos contar a média diária de hoje). Logo, ema[-1] é a ema de anteontem! Logo, macd[-1] é o macd de anteontem e não o macd anterior de hoje.

E a questão que se coloca é: e se contassemos com a média de hoje, mesmo sem o dia estar acabado? Nesse caso o macd estava sempre a mudar... e teriamos de fazer o partitionby... Isto parece magia a mais...



O .ema() acede 'a stream MACD[-1], MACD[-2], etc. Estes valores são calculados na altura. Como? O StreamPY consegue ver que o macd depende do ema(), e o ema() depende da stream medias_diarias[tick]. Então, para calcular macd[-1], usa medias_diarias[tick] SEM CONTAR com os elementos que foram adicionados depois e que já fazem parte de macd[0].

Outra hipótese consiste em guardar os valores à medida que eles vão sendo calculados. Exemplo. Quando aparece um novo dado no input, esse dado altera a medida diaria de hoje, o que eventualmente altera o macd de hoje. Mas não altera o macd de ontem - nem pode. Era bom que, de algum modo, o sistema percebesse que o MACD de ontem está confinado aos dados de ontem. Por outro lado, os dados de hoje substituem o MACD de hoje, mas MACD[-1] é o de ontem e não o que acabou de ser subsitutido!

Quando computo o macd, obtenho um ContinuousValue. Mas esse continuous value tem um referencial temporal - hoje, ontem, anteontem. Há medida que o tempo passa, o referencial mantem-se constante, pelo que obtenho só valores de ontem, anteontem, etc. No entanto, macd[-1], usa esse continuousvalue de ontem... A questão é: como é que o sistema sabe os referenciais? Como é que ele sabe que queremos os dados de um dia, queremos os dados de hoje - mas tendo em atenção que o dia ainda não acabou...